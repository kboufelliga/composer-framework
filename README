******************************************************************************************
The Composer Framework Project
__________________________________________________________________________________________
******************************************************************************************

Make sure to read the Install and Tutorials to get started. The rest of this document just
discusses the idea and will provide more general information rather than technical
information. A more detailed technical document is on the work.


------------------------------------------------------------------------------------------
- License -
__________________________________________________________________________________________

GNU Library General Public License, version 2.0

------------------------------------------------------------------------------------------
- Preamble - 
_________________________________________________________________________________________

The composer framework was designed to organize and accelerate the software development of 
web applications in general. Some of the ideas and conceptions are not new and come from 
a combination of needs and desire to simplify and solve real limitations and annoyances 
accumulated throughout years of software development. What is unique about the composer 
framework are two fundamental characteristics:

1- Element of consolidation of knowledge through the sharing of common data structures 
across domains. This is completely different from the traditional development  
using localized and data structures in closed environment. Again this is nothing new 
as there are many projects today concentrating and promoting the use of DHTs as a 
replacement. Note that I do not use any DHT at this point of time. Instead I have created 
a graph oriented model I believe can serve the purpose well. 

2- The second element is the development of applications through the composition of these 
dynamic data structures mentioned above. I have defined a very basic algorithm based on 
the simple fact that given any data structure it can be represented and defined in the form 
of 4 elements: a name, a link, a reference, and an identity. 

Following is a simple illustrating of the problem followed by an outline of the proposed 
solution and its benefits. In a semi traditional way of shared development, data structures
can be defined stored and accessed through a data layer involving databases and some 
ORM library or object to data access layer. Regardless of the access any addition or 
modification will require a maintenance of the impacted components. Although these are
limitations and annoyances we have learned to live with, the root of the problem has never
been truly addressed. On further observation in the nature of the root problem, we notice 
other areas of improvement such as the granularity in the transport of full objects. 

While there are various effective ways to alleviate these limitations which have evolved 
throughout many years of best software development practices, the core problem has not been 
addressed from a systemic point of view. The primary focus should be in addressing 
the definition, persistence, communication, and transportation of these data information and their 
structures. In particular the elimination of redundancies so that data structures can be 
defined in ways where each element is independent and any addition or modification does not
create dependencies limitations.

More details and information will be provided in terms of tutorials and hands on examples.

-------------------------------------------------------------------------------------------
- Disclaimer -
-------------------------------------------------------------------------------------------
This is a work in progress.

-------------------------------------------------------------------------------------------
- Installation -
-------------------------------------------------------------------------------------------
Read the INSTALL file
-------------------------------------------------------------------------------------------
- Notes -
-------------------------------------------------------------------------------------------
Read the README file 
-------------------------------------------------------------------------------------------
- Modules -
-------------------------------------------------------------------------------------------

1- Client
2- Engine
3- Server
4- Services  

