******************************************************************************************
The Composer Framework Project
__________________________________________________________________________________________
******************************************************************************************

Make sure to read the Install and Tutorials to get started. The rest of this document just
discusses the idea and will provide more general information rather than technical
information.


------------------------------------------------------------------------------------------
- License -
__________________________________________________________________________________________

GNU Library General Public License, version 2.0

------------------------------------------------------------------------------------------
- Preamble - 
_________________________________________________________________________________________

The composer framework was designed to organize and accelerate the software development of web applications in general.
Some of the ideas and conceptions are not new and can be found particularly in J2EE application servers and IoC container such as Glassfish and Spring respectively. What is unique about the composer framework are two fundamental characteristics:
1- Element for consolidation of knowledge through through the sharing of common data structures across a network. This is completly different then the traditional model of developing using a localized and closed data structures.
2- The second element is the development of applications through the composition of these dynamic data structures as defined in the first point above.

These are two basic fundamentals forming this new paradigm of development. Following is a simple illustrating of the problem followed by an outline of the proposed solution with its benefits. Assume we are starting 3 new projects and let us say that all will use certain common interfaces such as registration, user profile and more. Also let us assume the data layer is using a database for its persistent storage. The registration, user profile and some other common objects are represented by database tables and object mappings to those tables. Each project will define a way to access and manage the different interactions with the data layer. The first limitation as you can notice in this traditional and familiar method of development is that all 3 projects have 3 versions of the same classes to use in their libraries. If a change is done in one table requiring all the accessors to conform then all 3 libraries in each project will have to be updated, recompiled , re-tested and re-deployed. While there are various effective solutions to this problem that have evolved throughout many years in the software development practices, the root of the problem has not been addressed from a systematic point of view. This is where the composer framework is to provide a solution focused primarily in addressing the definition, persistence, communication, and transportation of these data information and their structures. The first task of this project is to eliminate the redundancies in recreating and referencing the same data structures in every new project that requires it. Therefore in the case of the three project the common objects, instead of building a library for each containing the respective classes, we will rather have a reference not to the class of the data but to the property of the classes that will be used. So the difference with the classical approach is that only required data is utilized while not necessarily stored locally. It is a more dynamic approach.  The structure and values are available on the network and the access is more granular. The transport focusses on the necessary rather than the whole of information. If I needed  just the customer id from the customer class why transport all the other information? This is what the composer framework is built to solve.

-------------------------------------------------------------------------------------------
- Disclaimer -
-------------------------------------------------------------------------------------------
This is a work in progress.

-------------------------------------------------------------------------------------------
- Installation -
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
- Notes -
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------
- Modules -
-------------------------------------------------------------------------------------------

I have broken down the framework into 4 groups
1- Interfaces
2- Engine
3- Communication
4- Services  
